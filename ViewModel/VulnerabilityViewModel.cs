using System;
using System.Collections.Generic;
using GalaSoft.MvvmLight;
using Vulnerator.Model.Object;
using LiveCharts;
using LiveCharts.Wpf;
using System.Linq;

namespace Vulnerator.ViewModel
{
    public class VulnerabilityViewModel : ViewModelBase
    {
        public string[] Labels { get; set; }
        public SeriesCollection SeriesCollection { get; set; }
        public Func<double, string> Formatter { get; set; }

        private List<Vulnerability> _vulnerabilityList;
        public List<Vulnerability> VulnerabilityList
        {
            get { return _vulnerabilityList; }
            set
            {
                if (_vulnerabilityList != value)
                {
                    _vulnerabilityList = value;
                    RaisePropertyChanged("VulnerabilityList");
                }
            }
        }

        private AsyncObservableCollection<string> _supportedFileTypes;
        public AsyncObservableCollection<string> SupportedFileTypes
        {
            get { return _supportedFileTypes; }
            set
            {
                if (_supportedFileTypes != value)
                {
                    _supportedFileTypes = value;
                    RaisePropertyChanged("SupportedFileTypes");
                }
            }
        }

        private AsyncObservableCollection<File> _ingestedFiles;
        public AsyncObservableCollection<File> IngestedFiles
        {
            get { return _ingestedFiles; }
            set
            {
                if (_ingestedFiles != value)
                {
                    _ingestedFiles = value;
                    RaisePropertyChanged("IngestedFiles");
                }
            }
        }

        public VulnerabilityViewModel()
        {
            _vulnerabilityList = PopulateVulnerabilityList(1000);
            SetTrendSeries();
            SupportedFileTypes = new AsyncObservableCollection<string>();
            IngestedFiles = new AsyncObservableCollection<File>();
            PopulateSupportedFileTypes();
        }

        private void PopulateSupportedFileTypes()
        {
            string[] fileTypes = new string[] { "ACAS", "CKL", "Fortify", "XCCDF", "WASSP" };
            foreach (string fileType in fileTypes)
            { SupportedFileTypes.Add("Import " + fileType); }
        }

        private List<Vulnerability> PopulateVulnerabilityList(int dataPoints)
        {
            List<Vulnerability> vulnerabilityList = new List<Vulnerability>();
            string[] rawRisks = new string[] { "I", "II", "III", "IV" };
            Random random = new Random();
            for (int i = 0; i < dataPoints; i++)
            {
                int age = random.Next(0, 90);
                DateTime lastObserved = DateTime.Now.AddDays(-age);
                int rawRiskIndex = random.Next(0, 3);
                vulnerabilityList.Add(new Vulnerability(rawRisks[rawRiskIndex], lastObserved));
            }
            vulnerabilityList = vulnerabilityList.OrderBy(v => v.LastObserved).ToList();
            return vulnerabilityList;
        }

        private void SetTrendSeries()
        {
            SeriesCollection = new SeriesCollection
            {
                new ColumnSeries
                {
                    Title = "Raw Risk",
                    Values = new ChartValues<double>
                    {
                        VulnerabilityList.Count(v => v.RawRisk == "I"),
                        VulnerabilityList.Count(v => v.RawRisk == "II"),
                        VulnerabilityList.Count(v => v.RawRisk == "III"),
                        VulnerabilityList.Count(v => v.RawRisk == "IV")
                    }
                }
            };

            Labels = new string[] { "CAT I", "CAT II", "CAT III", "CAT IV" };
            Formatter = value => value.ToString("N");
        }
    }
}
